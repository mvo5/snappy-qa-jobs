#!/usr/bin/env python3

import argparse
import logging
import os
import pytz
import re
import requests
import sys
import yaml

from datetime import datetime, timedelta
from trello import TrelloClient
from trello.exceptions import ResourceUnavailable

from snap import Snap


def _make_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('--key', help="Trello API key",
                        **environ_or_required('TRELLO_API_KEY'))
    parser.add_argument('--token', help="Trello OAuth token",
                        **environ_or_required('TRELLO_TOKEN'))
    parser.add_argument('--board', help="Trello board identifier",
                        **environ_or_required('TRELLO_BOARD'))
  
    # Subparsers definition
    subparser = parser.add_subparsers(help='commands', dest='command')
    parser_search = subparser.add_parser("search")
    parser_create = subparser.add_parser("create")
    parser_move = subparser.add_parser("move")
    parser_configure = subparser.add_parser("configure")
    parser_add_result = subparser.add_parser("add-result")
    parser_complete = subparser.add_parser("complete")
    parser_delete = subparser.add_parser("delete")
    parser_auto_clean = subparser.add_parser("auto-clean")
    parser_auto_move = subparser.add_parser("auto-move")
    parser_attach = subparser.add_parser("attach")

    # Adding common parameters to identify a card
    for subp in [parser_create, parser_move, parser_search, parser_configure, parser_add_result, parser_delete, parser_complete, parser_attach]:
        subp.add_argument('-s', '--snap', help="snap name", required=True)
        subp.add_argument('-v', '--version', help="snap version", required=True)
        subp.add_argument('-r', '--revision', help="snap revision", default="")

    # Arguments for create command
    parser_create.add_argument('-c', '--channel', help="snap channel to create the card", required=True)

    # Arguments for move command
    parser_move.add_argument('-c', '--channel', help="snap channel to move the card", required=True)

    # Arguments for configure command
    parser_configure.add_argument('--config', help="config file where the card skeleton is defined", required=True)

    # Arguments for add-result command
    parser_add_result.add_argument('-n', '--name', help="results name", required=True)
    parser_add_result.add_argument('-a', '--arch', help="snap architecture", required=True)
    parser_add_result.add_argument('--checklist', help="which checklist to use", default="Testflinger")
    parser_add_result.add_argument('--passed', help="indicates if the tests passed", action="store_true")
    parser_add_result.add_argument('--summary', help="test results sumary file")
    parser_add_result.add_argument('--link', help="test results link")

    # Arguments for complete command
    parser_complete.add_argument('--config', help="config file where the card skeleton is defined", required=True)

    # Arguments for auto clean command
    parser_auto_clean.add_argument('--config', help="config file where the archive and delete policy is stored", required=True)

    # Arguments for auto move command
    parser_auto_move.add_argument('--config', help="config file where the informartion needed for auto move snaps", required=True)

    # Arguments for attach command
    parser_attach.add_argument('-n', '--name', help="attachment name", required=True)
    parser_attach.add_argument('-f', '--file', help="file to attach to the card")
    parser_attach.add_argument('-u', '--url', help="url to attach to the card")

    return parser


def environ_or_required(key):
    if os.environ.get(key):
        return {'default': os.environ.get(key)}
    else:
        return {'required': True}


def get_client(key, token):
    return TrelloClient(api_key=key, token=token)


def get_pattern(snap, version, rev):
    if rev:
        pattern = '{} - {} - \({}\)'.format(
            re.escape(snap),
            re.escape(version),
            rev)
    else:
        pattern = '{} - {}'.format(
            re.escape(snap),
            re.escape(version))
    return pattern


def _search_card(board, query, card_filter="open"):
    for card in board.get_cards(card_filter=card_filter):
        if re.match(query, card.name):
            return card

def search(board, snap, version, revision):
    pattern = get_pattern(snap, version, revision)
    card = _search_card(board, pattern)
    if card:
        print('id:{}'.format(card.id))
    return card


def _get_list(board, listname):
    lane = None
    for l in board.open_lists():
        if listname == l.name:
            return l

def _create_card(board, snap, version, revision, channel):
    lane = _get_list(board, channel)
    if lane:
        if revision:
            card_name = '{} - {} - {}'.format(snap, version, revision)
        else:
            card_name = '{} - {}'.format(snap, version)
        return lane.add_card(card_name)
    else:
        print('error:channel {} is not defined'.format(channel))    


def create(board, snap, version, revision, channel):
    card = search(board, snap, version, revision)
    if card:
        print('error:card already exists')
        return

    card = _create_card(board, snap, version, revision, channel.capitalize())
    if card:
        print('id:{}'.format(card.id))
    return card


def move(board, snap, version, revision, channel):
    lane = _get_list(board, channel.capitalize())
    if not lane:
        print('error:list does not exist')
        return

    card = search(board, snap, version, revision)
    if not card:
        print('error:card does not exist')
        return

    card.change_list(lane.id)


def _find_or_create_card(board, snap, version, revision, channel='edge'):
    card = search(board, snap, version, revision)
    if card:
        return card

    card = _create_card(board, snap, version, revision, channel.capitalize())
    if card:
        print('id:{}'.format(card.id))
    return card


def _load_config(configfile):
    if not _check_file(configfile):
        print('error:config file does not exist')
        return

    try:
        with open(configfile) as handle:
            data = yaml.safe_load(handle)
    except (yaml.parser.ParserError, yaml.scanner.ScannerError):
        print('error:config file failed to be parsed')
        return

    return data


def _check_file(file):
    return os.path.exists(file)


def _search_checklist(card, checklist_name):
    for checklist in card.fetch_checklists():
        if checklist.name == checklist_name:
            return checklist


def _create_checklist(card, checklist_name, items=[]):
    checklist = _search_checklist(card, checklist_name)
    if checklist:
        print('error:checklist already exists')
        return

    checklist = card.add_checklist(checklist_name, [])
    for item in items:
        checklist.add_checklist_item(item + ' (NO RESULTS)')
    return checklist


def _find_or_create_checklist(card, checklist_name, items=[]):
    checklist = _search_checklist(card, checklist_name)

    if not checklist:
        checklist = _create_checklist(card, checklist_name, items)
    return checklist


def configure(board, snap, version, revision, configfile):
    config = _load_config(configfile)
    card = _find_or_create_card(board, snap, version, revision)

    checklists = config.get('checklists', {})
    for checklist_name in checklists.keys():
            checklist = _search_checklist(card, checklist_name)
            if checklist:
                continue
            checklist = _create_checklist(card, checklist_name)
            for checklist_items in checklists.get(checklist_name):
                checklist.add_checklist_item(checklist_items.get('name'), checklist_items.get('default', False))


def _create_comment_results_header(name, arch, passed):
    res = 'PASS'
    if not passed:
        res = 'FAIL'

    header = '### Test results summary' + '\n'
    header += '----' + '\n'
    header += 'name: {}'.format(name) + '\n'
    header += 'arch: {}'.format(arch) + '\n'
    header += 'result: {}'.format(res) + '\n'
    header += '----' + '\n'
    return header


def add_result(board, snap, version, revision, name, arch, checklist_name, passed, summaryfile, link):
    card = _find_or_create_card(board, snap, version, revision)
    checklist = _find_or_create_checklist(card, checklist_name)
    checklist.set_checklist_item(name, passed)

    # Attach el link to the results checklist
    if link:
        new_name = '{} [[Results]({})]'.format(checklist_name, link)
        checklist.rename_checklist_item(name, new_name)

    # Add a comment with the results summary
    if summaryfile:
        with open(summaryfile) as sf:
            summary = sf.read()
        header = _create_comment_results_header(name, arch, passed)
        card.comment(header + summary)
 

def complete(board, snap, version, revision, configfile):
    config = _load_config(configfile)
    card = search(board, snap, version, revision)
    if not card:
        print('error:card does not exist')
        return

    complete = config.get('complete', {})
    sign = complete.get('sign', {})

    sign_checklist = sign.get('sign-checklist', None)
    sign_actions = sign.get('sign-actions', [])

    if not sign_checklist or not sign_actions:
       print('info:no sign directives')
       return

    for action in sign_actions:
        source = action.get('source')
        target = action.get('target')

        source_checklist = _search_checklist(card, source)
        target_checklist = _search_checklist(card, sign_checklist)
        is_ready = True
        for checklist_item in source_checklist.items:
            if not checklist_item.get('checked'):
                is_ready = False
                break

        target_checklist.set_checklist_item(target, is_ready)


def delete(board, snap, version, revision):
    card = search(board, snap, version, revision)
    if not card:
        print('error:card does not exist')
        return
    card.delete()


def attach(board, snap, version, revision, name, file=None, url=None):
    card = search(board, snap, version, revision)
    if not card:
        print('error:card does not exist')
        return

    if not file and not url:
        print('error:at least one file or url needed')
        return

    if file:
        if not os.path.exists(file):
            print('error:file {} does not exist'.format(file))
            return

        with open(file) as f:
            card.attach(name=name, file=f)

    if url:
        card.attach(name=name, url=url)


def _string_to_seconds(expression):
    units = {'s':'seconds', 'm':'minutes', 'h':'hours', 'd':'days', 'w':'weeks'}

    return int(timedelta(**{
        units.get(m.group('unit').lower(), 'seconds'): int(m.group('val'))
        for m in re.finditer(r'(?P<val>\d+)(?P<unit>[smhdw]?)', expression, flags=re.I)
    }).total_seconds())


def _get_seconds_for_action(config, config_tag):
    dict_strings = config.get(config_tag, {})
    dict_seconds = {}
    for key in dict_strings.keys():
        dict_seconds[key] = _string_to_seconds(dict_strings.get(key))
    return dict_seconds


def auto_clean(board, configfile):
    config = _load_config(configfile)

    archive = _get_seconds_for_action(config, 'archive-time')
    delete = _get_seconds_for_action(config, 'delete-time')

    archive_list_name = config.get('archive-list')
    archive_list = _get_list(board, archive_list_name)
    if not archive_list:
        print('error:archive list {} not exist'.format(archive_list_name))

    for card in board.get_cards():
        # Get las activity registered on the card
        last_activity = card.date_last_activity.replace()
        last_activity_seconds = (datetime.now(pytz.utc) - last_activity).total_seconds()

        card_list = card.get_list()
        if card_list.name in archive.keys() and last_activity_seconds > archive.get(card_list.name):
            card.change_list(archive_list.id)
            print('info:archiving card {}'.format(card))
        elif card_list.name in delete.keys() and last_activity_seconds > delete.get(card_list.name):
            card.delete()
            print('info:deleting card {}'.format(card))
        else:
            print('info:skiping card {}'.format(card))


def _get_snap_info_by_channel(snapname):
    snap = Snap(snapname)
    return snap.get_info_by_channel()


def auto_move(board, configfile):
    config = _load_config(configfile)
    snaps_auto_move = config.get('snaps-auto-move', {})

    movements = {}
    for snap in snaps_auto_move:
        snap_channels_info = _get_snap_info_by_channel(snap)

        for channel in Snap.SUPPORTED_CHANNELS:
            channel_info = snap_channels_info.get(channel, {})
            if not channel_info:
                continue

            version = channel_info.get('version')
            revision = channel_info.get('revision')
            card = search(board, snap, version, revision)
            if not card:
                continue

            movements[card] = _get_list(board, channel.capitalize())

    for card in movements:
        lane = card.get_list()
        if lane.name != channel.capitalize():
            print('info: moving card {} to list {}'.format(card, channel))
            card.change_list(movements.get(card).id)
        else:
            print('info:kipping card in list {}'.format(lane))


def main():
    parser = _make_parser()
    args = parser.parse_args()

    client = get_client(args.key, args.token)
    board = client.get_board(args.board)

    if args.command == 'search':
        search(
            board,
            args.snap,
            args.version,
            args.revision)

    if args.command == 'create':
        create(
            board,
            args.snap,
            args.version,
            args.revision,
            args.channel)

    if args.command == 'move':
        move(
            board,
            args.snap,
            args.version,
            args.revision,
            args.channel)

    if args.command == 'configure':
        configure(
            board,
            args.snap,
            args.version,
            args.revision,
            args.config)

    if args.command == 'add-result':
        add_result(
            board,
            args.snap,
            args.version,
            args.revision,
            args.name, 
            args.arch,
            args.checklist,
            args.passed,
            args.summary,
            args.link)

    if args.command == 'complete':
        complete(
            board,
            args.snap,
            args.version,
            args.revision,
            args.config)

    if args.command == 'delete':
        delete(
            board,
            args.snap,
            args.version,
            args.revision)

    if args.command == 'auto-clean':
        auto_clean(
            board,
            args.config)

    if args.command == 'auto-move':
        auto_move(
            board,
            args.config)

    if args.command == 'attach':
        attach(
            board,
            args.snap,
            args.version,
            args.revision,
            args.name,
            args.file,
            args.url)


if __name__ == "__main__":
    main()
